//lsar-emailable
resource "azurerm_monitor_scheduled_query_rules_alert" "otherServiceError" {
  name                = "lsar-emailable-error-${var.environment}"
  resource_group_name = data.azurerm_resource_group.resource_group.name
  location            = var.location // how to add Global
  description         = "The alert is indicating that Emailable provider returned exceptional status code"
  enabled             = true
  data_source_id      = azurerm_application_insights.application_insights.id
  severity            = "1"
  frequency           = "PT1M"
  time_window         = "PT5M"
  throttling          = "PT5M"
  query_type          = "ResultCount"
  query               = <<-QUERY
  customEvents
  | where name == "ServiceCallProviderError"
    and customDimensions.Provider == "Emailable"
    and (
    (
      toint(customDimensions.ProviderHttpResponseCode) < 200
      or toint(customDimensions.ProviderHttpResponseCode) > 299
    )
    and
    toint(customDimensions.ProviderHttpResponseCode) !in (408, 249, 504)
  )
  | sort by timestamp asc
  QUERY

  action {
    action_group  = azurerm_monitor_action_group.ag_error.id
    email_subject = "[ERROR] Emailable timeout"
  }

  trigger {
    operator  = "GreaterThanOrEqual"
    threshold = 1
  }

  tags = var.defaultTags
}

resource "azurerm_monitor_scheduled_query_rules_alert" "thirdPartyServiceTimeoutsError" {
  name                = "lsar-emailable-timeout-error-${var.environment}"
  resource_group_name = data.azurerm_resource_group.resource_group.name
  location            = var.location
  description         = "The alert is indicating that Emailable provider returned 408 or 249 or 504 status code 3 times in 10 minutes"
  enabled             = true
  data_source_id      = azurerm_application_insights.application_insights.id
  severity            = "1"
  frequency           = "PT5M"
  time_window         = "PT5M"
  throttling          = "PT5M"
  query_type          = "ResultCount"
  query               = <<-QUERY
  customEvents
  | where name == "${var.serviceTimeoutsErrorSettings.event}"
    and customDimensions.Provider == "${each.value.provider}"
    and ${each.value.filter}| sort by timestamp asc
  QUERY

  action {
    action_group  = azurerm_monitor_action_group.ag_error.id
    email_subject = "[ERROR] Emailable timeout"
  }

  trigger {
    operator  = "GreaterThanOrEqual"
    threshold = "3"
  }

  tags = var.defaultTags
}

resource "azurerm_monitor_scheduled_query_rules_alert" "thirdPartyServiceTimeoutsWarning" {
  name                = "lsar-emailable-timeout-warning-${var.environment}"
  resource_group_name = data.azurerm_resource_group.resource_group.name
  location            = var.location
  description         = "The alert is indicating that Emailable provider returned 408 or 249 or 504 status code"
  enabled             = true
  data_source_id      = azurerm_application_insights.application_insights.id
  severity            = "2"
  frequency           = "PT5M"
  time_window         = "PT5M"
  throttling          = "PT5M"
  query_type          = "ResultCount"
  query               = <<-QUERY
  customEvents
  | where name == "${var.serviceTimeoutsWarningSettings.event}"
    and customDimensions.Provider == "${each.value.provider}"
    and ${each.value.filter}| sort by timestamp asc
  QUERY

  action {
    action_group  = azurerm_monitor_action_group.ag_error.id
    email_subject = "[Warning] Emailable timeout"
  }

  trigger {
    operator  = "GreaterThanOrEqual"
    threshold = "3"
  }

  tags = var.defaultTags
}

resource "azurerm_monitor_scheduled_query_rules_alert" "unexpectedServiceErrorApim" {

  name                = "NameOfAlertRule" //check
  resource_group_name = data.azurerm_resource_group.resource_group.name
  location            = "North Europe"             //check
  description         = "Description of the Alert" //check
  enabled             = true
  data_source_id      = azurerm_application_insights.application_insights.id
  severity            = "1"    //check
  frequency           = "PT1M" //check
  time_window         = "PT5M" //check
  throttling          = "PT5M"
  query_type          = "ResultCount"
  query               = <<-QUERY
  requests
  | where toint(resultCode) < 200 or toint(resultCode) >= 500
  | where customDimensions["Service Type"] in ("API Management")
  | order by timestamp desc
  QUERY

  action {
    action_group  = azurerm_monitor_action_group.main.id
    email_subject = "[WARNING] Emailable timeout"
  }

  trigger {
    operator  = "GreaterThanOrEqual"
    threshold = 1
  }

  tags = var.defaultTags
}



resource "azurerm_monitor_scheduled_query_rules_alert" "thirdPartyServiceTimeoutsWarning" {
  for_each = { for alert in var.serviceTimeoutsWarningSettings.alerts : alert.name => alert }

  name                = each.key
  resource_group_name = var.resourceGroupName
  location            = var.location
  description         = each.value.description
  enabled             = each.value.enabled
  data_source_id      = var.serviceTimeoutsWarningSettings.data_source_id
  severity            = var.serviceTimeoutsWarningSettings.severity
  frequency           = var.serviceTimeoutsWarningSettings.frequency
  time_window         = var.serviceTimeoutsWarningSettings.time_window
  throttling          = var.serviceTimeoutsWarningSettings.throttling
  query_type          = var.serviceTimeoutsWarningSettings.query_type
  query               = <<-QUERY
  customEvents
  | where name == "${var.serviceTimeoutsWarningSettings.event}"
    and customDimensions.Provider == "${each.value.provider}"
    and ${each.value.filter}| sort by timestamp asc
  QUERY

  action {
    action_group  = var.serviceTimeoutsWarningSettings.action_groups
    email_subject = each.value.email_subject
  }

  trigger {
    operator  = var.serviceTimeoutsWarningSettings.trigger_operator
    threshold = var.serviceTimeoutsWarningSettings.trigger_threshold
  }

  tags = var.defaultTags
}

resource "azurerm_monitor_scheduled_query_rules_alert" "thirdPartyServiceTimeoutsError" {
  for_each = { for alert in var.serviceTimeoutsErrorSettings.alerts : alert.name => alert }

  name                = each.key
  resource_group_name = var.resourceGroupName
  location            = var.location
  description         = each.value.description
  enabled             = each.value.enabled
  data_source_id      = var.serviceTimeoutsErrorSettings.data_source_id
  severity            = var.serviceTimeoutsErrorSettings.severity
  frequency           = var.serviceTimeoutsErrorSettings.frequency
  time_window         = var.serviceTimeoutsErrorSettings.time_window
  throttling          = var.serviceTimeoutsErrorSettings.throttling
  query_type          = var.serviceTimeoutsErrorSettings.query_type
  query               = <<-QUERY
  customEvents
  | where name == "${var.serviceTimeoutsErrorSettings.event}"
    and customDimensions.Provider == "${each.value.provider}"
    and ${each.value.filter}| sort by timestamp asc
  QUERY

  action {
    action_group  = var.serviceTimeoutsErrorSettings.action_groups
    email_subject = each.value.email_subject
  }

  trigger {
    operator  = var.serviceTimeoutsErrorSettings.trigger_operator
    threshold = var.serviceTimeoutsErrorSettings.trigger_threshold
  }

  tags = var.defaultTags
}

resource "azurerm_monitor_scheduled_query_rules_alert" "otherServiceError" {
  for_each = { for alert in var.otherServiceErrorSettings.alerts : alert.name => alert }

  name                = each.key
  resource_group_name = var.resourceGroupName
  location            = var.location
  description         = each.value.description
  enabled             = each.value.enabled
  data_source_id      = var.otherServiceErrorSettings.data_source_id
  severity            = var.otherServiceErrorSettings.severity
  frequency           = var.otherServiceErrorSettings.frequency
  time_window         = var.otherServiceErrorSettings.time_window
  throttling          = var.otherServiceErrorSettings.throttling
  query_type          = var.otherServiceErrorSettings.query_type
  query               = <<-QUERY
  customEvents
  | where name == "${var.otherServiceErrorSettings.event}"
    and customDimensions.Provider == "${each.value.provider}"
    and ${each.value.filter}| sort by timestamp asc
  QUERY

  action {
    action_group  = var.otherServiceErrorSettings.action_groups
    email_subject = each.value.email_subject
  }

  trigger {
    operator  = var.otherServiceErrorSettings.trigger_operator
    threshold = var.otherServiceErrorSettings.trigger_threshold
  }

  tags = var.defaultTags
}
